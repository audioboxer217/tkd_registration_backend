name: 'Backend Tests'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  backend:
    name: 'Backend Tests'
    runs-on: ubuntu-latest
    environment: Test

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::799879571353:role/GitHub_Actions
        role-session-name: BackendTest
        aws-region: us-east-1

    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dev_requirements.txt

    - id: execute-process_entries
      name: Run 'process_entries.py'
      env:
        BADGE_BUCKET: "${{ vars.BADGE_BUCKET }}"
        BADGE_GFOLDER: "${{ vars.BADGE_GFOLDER }}"
        COMPETITION_NAME: "${{ vars.COMPETITION_NAME }}"
        COMPETITION_YEAR: "${{ vars.COMPETITION_YEAR }}"
        CONFIG_BUCKET: "${{ vars.CONFIG_BUCKET }}"
        CONTACT_EMAIL: "${{ vars.CONTACT_EMAIL }}"
        DB_TABLE: "${{ vars.DB_TABLE }}"
        EMAIL_PASSWD: "${{ secrets.EMAIL_PASSWORD }}"
        EMAIL_PORT: "${{ vars.EMAIL_PORT }}"
        EMAIL_SERVER: "${{ vars.EMAIL_SERVER }}"
        FROM_EMAIL: "${{ vars.FROM_EMAIL }}"
        PROFILE_PIC_BUCKET: "${{ vars.PROFILE_PIC_BUCKET }}"
        SQS_QUEUE_URL: "${{ vars.SQS_QUEUE_URL }}"
        STRIPE_API_KEY: "${{ secrets.STRIPE_API_KEY }}"
      run: echo "results=$(python process_entries.py)" >> "$GITHUB_OUTPUT"
    - run: echo ${{steps.execute-process_entries.outputs.results}}
    - uses: nick-fields/assert-action@v2
      with:
        expected: |
          Processing 1 entries
            Processing Test User
          Entry added for Test User as a competitor
          Mail Sent!
            Test User Processed Successfully
        actual: ${{ steps.execute-process_entries.outputs.value }}

    - id: execute-cleanup
      name: Run 'cleanup.py'
      env:
        DB_TABLE: "${{ vars.DB_TABLE }}"
      run: |
        python tests/cleanup_test_entry.py
      if: always()
    - uses: nick-fields/assert-action@v2
      with:
        expected: Test User successfully deleted
        actual: ${{ steps.execute-cleanup.outputs.value }}
      if: always()